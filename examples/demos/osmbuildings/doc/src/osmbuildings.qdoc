// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \title Qt Quick Demo - OSM Buildings
    \examplecategory {3D}
    \ingroup qtquickdemos
    \example demos/osmbuildings
    \brief A 3d building viewer of OSM buildings map data.
    \meta {tag} {demo,quick,3d}
    \borderedimage osmbuildings.jpg

    The \e{OSMBuildings} application demonstrates of using 3d building data from OSM servers
    or from locally limited data set when the server isn't available,
    to create 3d building geometry from the data to show on the map.

    The application uses a queue to handle concurrent requests to boost up the loading process of
    the maps and the building data.

    \quotefromfile demos/osmbuildings/request.cpp
    \skipto OSMRequest::OSMRequest
    \printuntil m_queuesTimer.setInterval(0);

    It implements a custom request handler class for fetching the data from the OSM building and map servers.

    \quotefromfile demos/osmbuildings/request.cpp
    \skipto OSMRequest::getBuildingsData
    \printuntil } );
    \skipto OSMRequest::getMapsData
    \printuntil } );

    Also it's parsing the online data to convert it to a QVarianList of keys and values of Geo formats e.g. QGeoPolygon.

    \quotefromfile demos/osmbuildings/request.cpp
    \skipto importGeoJson(QJsonDocument::fromJson
    \printuntil --m_buildingsNumberOfRequestsInFlight;

    The building parsed data send to a custom geometry item to convert the geo coordinate to proper 3d coordinates.

    \quotefromfile demos/osmbuildings/geometry.cpp
    \skipto convertGeoCoordToVertexPosition
    \printuntil }

    It generates necessary data for the index buffer and vertex buffer e.g. Position, Normal, Tangent, UV, ...

    \quotefromfile demos/osmbuildings/geometry.cpp
    \skipto for ( const QVariant &baseData : geoVariantsList )
    \printuntil clear()

    The map downloaded PNG data send to a custom QQuick3DTextureData item to convert the PNG format data to a texture
    for use as a texture for map tiles.

    \quotefromfile demos/osmbuildings/manager.cpp
    \skipto CustomTextureData::setImageData
    \printuntil }

    It uses camera position, orientation, zoom level, and tilt to find the nearest tiles in the view.

    \quotefromfile demos/osmbuildings/manager.cpp
    \skipto OSMManager::setCameraProperties
    \printuntil ->getMapsData( queue );

    Also generates the tiles request queue to submit as a request.

    \quotefromfile demos/osmbuildings/manager.cpp
    \skipto OSMManager::addBuildingRequestToQueue
    \printuntil }

    The app uses a custom camera controller to navigate through the map,
    using the left mouse button to pan the map and right mouse button to rotate,
    and mouse wheel to zoom the camera.

    \quotefromfile demos/osmbuildings/Main.qml
    \skipto OSMCameraController
    \printuntil }

    Every chunk of the map tile consists of two types of the QML model and custom material.
    one using a rectangle as a base to render tile map texture.

    \quotefromfile demos/osmbuildings/Main.qml
    \skipto id: chunkModelMap
    \dots 8
    \skipto Model
    \printuntil }
    \printuntil ]
    \printuntil }

    It's using a custom geometry to render tile buildings.

    \quotefromfile demos/osmbuildings/Main.qml
    \skipto id: chunkModelBuilding
    \dots 8
    \skipto Model
    \printuntil }
    \printuntil ]
    \printuntil }

    To render buildings parts e.g rooftop and body of the building with one draw call,
    it uses a custom shader to render building chunks.

    \quotefromfile demos/osmbuildings/customshaderbuildings.frag
    \skipto SPDX-License-Identifier
    \printuntil }

    To understand the application better, browse through its code using
    Qt Creator.

    \include examples-run.qdocinc

    \sa {QML Applications}
*/
